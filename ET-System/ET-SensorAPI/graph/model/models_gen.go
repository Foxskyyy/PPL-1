// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type AuthPayload struct {
	User  *User  `json:"user"`
	Token string `json:"token"`
}

type DeepSeekResponse struct {
	Analysis *string `json:"analysis,omitempty"`
}

type Device struct {
	ID          string        `json:"id"`
	UserGroup   *UserGroup    `json:"userGroup"`
	Name        string        `json:"name"`
	Location    string        `json:"location"`
	CreatedAt   time.Time     `json:"createdAt"`
	WaterUsages []*WaterUsage `json:"waterUsages"`
}

type Mutation struct {
}

type Query struct {
}

type User struct {
	ID          string       `json:"id"`
	Username    string       `json:"username"`
	Email       string       `json:"email"`
	DisplayName *string      `json:"displayName,omitempty"`
	Verified    bool         `json:"verified"`
	CreatedAt   time.Time    `json:"createdAt"`
	Groups      []*UserGroup `json:"groups"`
}

type UserGroup struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
	Devices   []*Device `json:"devices"`
	Users     []*User   `json:"users"`
}

type WaterUsage struct {
	ID         string    `json:"id"`
	Device     *Device   `json:"device"`
	FlowRate   float64   `json:"flowRate"`
	TotalUsage float64   `json:"totalUsage"`
	RecordedAt time.Time `json:"recordedAt"`
}

type OAuthProvider string

const (
	OAuthProviderGoogle OAuthProvider = "GOOGLE"
	OAuthProviderApple  OAuthProvider = "APPLE"
)

var AllOAuthProvider = []OAuthProvider{
	OAuthProviderGoogle,
	OAuthProviderApple,
}

func (e OAuthProvider) IsValid() bool {
	switch e {
	case OAuthProviderGoogle, OAuthProviderApple:
		return true
	}
	return false
}

func (e OAuthProvider) String() string {
	return string(e)
}

func (e *OAuthProvider) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OAuthProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OAuthProvider", str)
	}
	return nil
}

func (e OAuthProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OAuthProvider) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OAuthProvider) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
